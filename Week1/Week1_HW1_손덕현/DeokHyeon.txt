
클래스와 상속(Inheritance)

: 속성이 같은 객체들을 대표할 수 있는 대상을 클래스라고 한다.
: 클래스는 객체를 정의하는 틀이며, 필드와 메소드로 구성되어진다.

: 클래스는 추상화를 이용 슈퍼클래스(상위 클래스, 부모클래스)와 서브클래스(하위 클래스, 자식 클래스)로 구분한다.

: 상속의 경우 상위 객체를 재사용, 하위 객체를 빨리 개발 할 수 있도록 한다.
: 반복된 코드의 중복을 주여주며 유지보수의 편리성을 제공한다.
 
extends & implements & abstrace

extends : 부모에서 선언/정의를 모두 하여 자식은 메소드/변수를 그대로 사용 할 수 있다.

implements (interface 구현) : 부모 객체는 선언만 하며 정의(내용)은 자식에서 오버라이딩 해야한다.

abstract :  extends와 interface의 혼합

Git

1. git init : 깃 저장소를 초기화한다. 저장소나 디렉토리 안에 이 명령을 실행하기 전까지는 그냥 일반 폴더이다.
2. git config : configure의 준말로, 깃을 설정 할 떄 사용.
(ex) git config --global use.email "userID"

3. git status : 저장소의 상태를 체크. 저장소안에 어떤 안에 어떠한 파일들이 있는지를 확인한다.
4. git add : 명령어 실행시 깃의 저장소 "스냅샷"에 포함된다.
5. git commit : 변경사항이 생가면 저장소의 스냅샷을 찍기 위해 입력
(ex) commit -m "Message hear 형식으로 사용 간단한 기록을 남길 수 있다.
6. git branch : 여러 협업자들과 작업을 할떄, 자신만의 변경사항을 원할떄 새로운 브랜치를 생성 커밋 타임라인을 만든다
7. git checkout : 현재 위치하고 있지 않은 저장소를 체크아웃 한다.
8. git merge : 모든 협업자가 볼 수 있는 master 브랜치로 병합하는 명령어.
9. git push : 컴퓨터에서 작업하고 저장소에 저장된 파이들을 깃허브에 올리는 명령어
10. git pull : 깃헙 저장소에 새로운 변경사항이 있을때 다운로드 하는 명령어.
